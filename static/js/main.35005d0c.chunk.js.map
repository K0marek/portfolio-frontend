{"version":3,"sources":["components/layout/Navbar.tsx","components/main/Dashboard.tsx","components/player/AlbumsContainer.tsx","components/player/SongLabel.tsx","components/player/Description.tsx","components/player/Info.tsx","components/player/Player.tsx","actions/loadAlbums.tsx","App.tsx","serviceWorker.ts","reducers/albumReducer.tsx","reducers/rootReducer.tsx","index.tsx"],"names":["Navbar","className","to","Dashboard","AlbumsContainer","albumsNames","useSelector","state","albumReducer","changeAlbum","console","log","id","map","album","index","key","onClick","href","SongLabel","name","size","songName","slice","Description","currentAlbumSongs","songs","dir","file","Info","Player","dispatch","useDispatch","useEffect","a","fetch","res","json","object","dirs","files","type","albums","App","exact","path","component","Boolean","window","location","hostname","match","initState","action","combineReducers","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.35005d0c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <div className=\"navbar-fixed\">\r\n            <nav className=\"nav-wrapper\">\r\n                <Link to=\"/\" className=\"brand-logo center\">Mateusz Kleszcz</Link>\r\n                <ul className=\"left\">\r\n                    <li><Link to='/player'>Player</Link></li>\r\n                </ul>\r\n                <ul className=\"right\">\r\n                    <li><Link to=\"/signin\">Sign In</Link></li>\r\n                    <li><Link to=\"/signup\">Sign Up</Link></li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nconst Dashboard = () => {\r\n    return (\r\n        <div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;","import React from 'react';\r\nimport { useSelector } from 'react-redux'\r\nimport { AppState } from '../../store';\r\n\r\nconst AlbumsContainer = () => {\r\n\r\n    const { albumsNames } = useSelector((state: AppState) => state.albumReducer)\r\n\r\n    const changeAlbum = () => {\r\n        console.log('ee')\r\n    }\r\n\r\n    return (\r\n        <div id='albums' >\r\n            <ul className=\"albumsList\">\r\n                {\r\n                    albumsNames.map((album: any, index: any) =>\r\n                        <li key={index} className=\"albumName\" onClick={changeAlbum}>\r\n                            <a href=\"#\">{album}</a>\r\n                        </li>\r\n                    )\r\n                }\r\n            </ul>\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default AlbumsContainer;","import React from 'react';\r\n\r\ninterface SongProps {\r\n    album: string,\r\n    name: string,\r\n    size: string,\r\n    id: number\r\n}\r\n\r\nconst SongLabel = ({ album, name, size, id }: SongProps) => {\r\n\r\n    const songName = name.slice(3, -4)\r\n\r\n    return (\r\n        <div className=\"songLabel\">\r\n            <div className=\"id\">{id + 1}</div>\r\n            <div className=\"title\">{songName}</div>\r\n            <div className=\"album\">{album}</div>\r\n            <div className=\"time\">Time</div>\r\n            <div className=\"addToFavourite\">Add</div>\r\n            <div className=\"play\">Play</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SongLabel;","import React from 'react';\r\nimport { useSelector } from 'react-redux'\r\nimport { AppState } from '../../store';\r\nimport SongLabel from './SongLabel';\r\n\r\nconst Description = () => {\r\n\r\n    const { currentAlbumSongs } = useSelector((state: AppState) => state.albumReducer)\r\n\r\n    return (\r\n        <div id=\"description\">\r\n            <div className=\"top\">\r\n                <div className=\"id\">#</div>\r\n                <div className=\"title\">Title</div>\r\n                <div className=\"album\">Album</div>\r\n                <div className=\"time\"><i className=\"material-icons\">timer</i></div>\r\n                <div className=\"addToFavourite\"><i className=\"material-icons\">add</i></div>\r\n                <div className=\"play\"><i className=\"material-icons\">play_circle_outline</i></div>\r\n            </div>\r\n            {currentAlbumSongs.map((songs, index) => {\r\n                const { dir, file, size } = songs\r\n                return <SongLabel album={dir} name={file} size={size} id={index} key={index} />\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Description;","import React from 'react';\r\n\r\nconst Info = () => {\r\n    return (\r\n        <div id=\"info\">\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Info;","import React, { useEffect } from 'react';\r\nimport './Player.css';\r\nimport AlbumsContainer from './AlbumsContainer';\r\nimport { loadAlbums } from '../../actions/loadAlbums'\r\nimport { useDispatch } from 'react-redux';\r\nimport Description from './Description';\r\nimport Info from './Info';\r\n\r\nconst Player = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(loadAlbums())\r\n    })\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <AlbumsContainer />\r\n            <Description />\r\n            <Info />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Player;","import { Albums } from \"../types/Albums\"\r\nimport { AppActions } from \"../types/actions\"\r\nimport { Dispatch } from \"redux\"\r\n\r\nconst albumLoaded = (albums: Albums): AppActions => ({\r\n    type: 'LOAD_ALBUM_SUCCESS',\r\n    albums\r\n})\r\n\r\nexport const loadAlbums = () => async (dispatch: Dispatch<AppActions>) => {\r\n    const res = await fetch('https://portfolio-kleszcz.herokuapp.com/api/albums')\r\n    const json = await res.json()\r\n    const object: Albums = {\r\n        albumsNames: json.dirs,\r\n        currentAlbumSongs: json.files\r\n    }\r\n    await dispatch(albumLoaded(object))\r\n}","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport Navbar from './components/layout/Navbar';\nimport Dashboard from './components/main/Dashboard';\nimport Player from './components/player/Player';\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route exact path='/' component={Dashboard} />\n          <Route path='/player' component={Player} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Albums } from \"../types/Albums\"\r\nimport { AlbumsActionTypes } from \"../types/actions\"\r\n\r\nconst initState: Albums = {\r\n    albumsNames: [],\r\n    currentAlbumSongs: []\r\n}\r\n\r\nconst albumReducer = (state = initState, action: AlbumsActionTypes): Albums => {\r\n    switch (action.type) {\r\n        case 'LOAD_ALBUM_SUCCESS':\r\n            const { albumsNames, currentAlbumSongs } = action.albums\r\n            return {\r\n                ...state,\r\n                albumsNames,\r\n                currentAlbumSongs\r\n            }\r\n        default:\r\n            return { ...state }\r\n    }\r\n}\r\n\r\nexport default albumReducer","import { combineReducers } from 'redux'\r\nimport albumReducer from './albumReducer'\r\n\r\nexport default combineReducers({\r\n    albumReducer\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers/rootReducer';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}